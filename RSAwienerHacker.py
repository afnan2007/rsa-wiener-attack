'''
Created on Dec 14, 2011

@author: pablocelayes
'''

import ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator

def hack_RSA(e,n):
    '''
    Finds d knowing (e,n)
    applying the Wiener continued fraction attack
    '''
    frac = ContinuedFractions.rational_to_contfrac(e, n)
    convergents = ContinuedFractions.convergents_from_contfrac(frac)
    
    for (k,d) in convergents:
        
        #check if d is actually the key
        if k!=0 and (e*d-1)%k == 0:
            phi = (e*d-1)//k
            s = n - phi + 1
            # check if the equation x^2 - s*x + n = 0
            # has integer roots
            discr = s*s - 4*n
            if(discr>=0):
                t = Arithmetic.is_perfect_square(discr)
                if t!=-1 and (s+t)%2==0:
                    print("Hacked!")
                    return d

# TEST functions

def test_hack_RSA():
   e = 50979873601203356797049835667358168897418151237244374891076638736417719946262098818974561786683719566264527491591557846789236121638787452096671620381852132498978445916523993167090162664740216153590150161390695979352476756392399580423468676387736922050199646694097537032054068606199384738489455713304122068297;
   n = 80714932094228462012853731859458924227563191952935417537311485796025376985327111820350563733513853281350348821153357507360476465375853605895636145929049625789391219695379855390725089571222690261033066936567723026509583207259281672118258075164114239186778352794971954683691764084280622792711192645882156027193;
   c = 16381080755150672593466615477898695355860652758487949572532826086276889883425237449786765969641153473051686487669742674202616756231209993609174343795761548461289825962867596550669187145106195893141596803390633771866330523612331956069028560273926246145720537750298767324336869810504539238044241815606833619971;
   d = hack_RSA(e,n)
   p = pow(c,d,n);
   st = "{:x}".format(p);
   print(st);
   print(binascii.unhexlify(st));
    
    


    


        
    
